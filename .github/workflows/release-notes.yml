name: Generate Release Notes
on:
  workflow_dispatch:

  release:
    types: [ published ]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Update release description
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release = context.payload.release
            const latestRelease = await github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            const commits = []
            let page = 1
            console.log('context', context)
            console.log('latestRelease', latestRelease)
            const commitsInRelease = release.total_commits_count
            while (commits.length < commitsInRelease) {
              const apiResponse = await github.repos.listCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: latestRelease.data.tag_name,
                per_page: 100,
                page: page
              })
              console.log('apiResponse', apiResponse)
              commits.push(...apiResponse.data)
              if (apiResponse.data.length === 0 || apiResponse.data.length < 100) {
                break
              }
              page++
            }
            const commitMessages = commits.slice(0, commitsInRelease)
              .reverse()
              .map((commit) => {
                const split = commit.commit.message.split("\n")
                const title = `**${split[0].replace(/\(#\d+\)/g, '').trim()}**`
                const description = split.slice(1).join("\n").trim()
                return `${title}\n${description}\n`
            }).join("\n")
            const releaseDate = new Date(release.published_at).toISOString().slice(0, 10)
            const newDescription = `## ${release.name}\n_${releaseDate}_\n${commitMessages}`.trim()
            await github.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release.id,
              body: newDescription
            })